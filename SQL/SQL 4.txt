use infinitedb

--set commands

create table Utable1(uid int identity, uname varchar(20), ugrade char(1), upercentage int)

insert into Utable1 values('Manoj','A',85),('Nandini','A',80),('Mehrun','B',65),('Nithin','B',60)

create table Utable2(uid int identity, uname varchar(20), ugrade char(1), upercentage int)

insert into Utable2 values('Yogesh','A',85),('Susmitha','A',82),('Monali','B',65),('Mahesh','B',60)

select * from utable1
select * from utable2

--union
select uname,ugrade,upercentage from utable1 
union 
select uname,ugrade,upercentage from utable2

update utable2 set uname='Manoj' where uname is null

select uname,ugrade,upercentage from utable1 
union all
select uname,ugrade,upercentage from utable2

--intersect
select uname,ugrade,upercentage from utable1 
intersect
select uname,ugrade,upercentage from utable2

select uname,ugrade,upercentage from utable2
except
select uname,ugrade,upercentage from utable1

--for except
create table empdata(Id int identity, Ename varchar(20),Age int, City varchar(20))

insert into empdata values('Rahul',21,'Noida'),('Vikram',21,'Chennai'),('Dinesh',21,'Vizag')

create table BonusData(Bid int, Eid int, BonusAmt int)

insert into BonusData values(100,4,5000),(101,2,6000),(102,1,7000)

select * from empdata
select * from BonusData

select Id, Ename,BonusAmt from empdata left join  BonusData on empdata.Id = BonusData.Eid
except
select Id, Ename,BonusAmt from empdata right join  BonusData on empdata.Id = BonusData.Eid


select Id, Ename,BonusAmt from empdata right join  BonusData on empdata.Id = BonusData.Eid
except
select Id, Ename,BonusAmt from empdata left join  BonusData on empdata.Id = BonusData.Eid

--CTE's
--constructing our first cte
with firstcte(EmployeeName, AnnualSalary,DepartmentName)
as (select empname,(salary*12), department.DeptName from employee join department
on employee.DepartmentId = Department.Deptid),   -- ',' is used to include multiple cte
--main query
--select * from firstcte where AnnualSalary >78000

--query 2
cte2 as ( select DepartmentName, avg(AnnualSalary) 'Dept Annual Salary' from firstcte
group by departmentname having avg(annualsalary )>76000)

--using the above 2 ctes
select * from cte2 where [Dept Annual Salary] > 76500


-- eg 2 of cte
--dml with cte
with dmlcte(DepartmentNumber, DepartmentName, NewBudget)
as (select deptid, deptname, deptbudget from department)

--insertion
--insert into dmlcte values(10,'New Department',2500000)
--select * from department

--updation
--update dmlcte set NewBudget = 0 where DepartmentNumber = 10
--select * from department

--deletion

delete from dmlcte where DepartmentNumber =10
select * from Department


--recursive ctes
with cte_week(n, wkDay)
as(select 0, DATENAME(dw,0)
union all
select n + 1, datename(dw,1) from cte_week where n <6)

--using the cte
select n,wkDay from cte_week

--Hierarchial queries with recursive cte
with hcte(EmpNo,EName,Manager,EmpLevel)
as(select empno,ename,mgr_id, 1 EmpLevel
  from emp where mgr_id is null         -- initial or first level / anchor member
  --select * from hcte
union all
select e.empno, e.ename,e.mgr_id, oq.emplevel + 1   -- recursive values
 from emp e join hcte oq on e.mgr_id = oq.empno where e.mgr_id is not null)
 --using the above cte
 select * from hcte
 order by EmpLevel

  select * from hcte

  --ex
  --write a simple recursive CTE to find out all the months in a year

  with monthcte as( select 1 as 'MonthNumber',
  Datename(month, cast('2025-01-01' as Date)) as 'MonthName'
  union all
  select MonthNumber + 1,
   datename(month, dateadd(month, Monthnumber, '2025-01-01'))
   from monthcte where monthnumber < 12)

select * from monthcte


 --create a resursive query to display values from 1 to 10
   with ctr(initialvalue) as
   (select 1
    union all
	select initialvalue + 1 from ctr
	where initialvalue < 10)
	select * from ctr

	--T-Sql
	--eg 1. 

	begin
	declare @v1 int=50, @v2 int=100
	declare @sum int =@v1
	--set @sum = @v1
	print @sum
	if(@v1 > @v2)
	  print 'V1 is greater'
	else
	  print 'V2 is greater'
	end


--eg 2. using tsql increase the salary of all employees who are earning less than 106

begin
 declare @esal decimal
 declare @name varchar(30)  
 select @name= empname, @esal=salary from employee where empid=106  -- 6250 syam

 if(@esal <= 6250)
  begin
   set @esal = @esal + 100
    print 'The revised Salary of ' + @name + ' is ' + ' ' + cast(@esal as varchar(8))
  end
  else
   begin
    print 'Current Salary is OK'
   end
end
   --eg 3 while
   declare @ctr int =1
   while @ctr < =5
    begin
	  print @ctr
	  set @ctr = @ctr+1
    end

	--while with break
declare @ctr1 int =0
   while @ctr1 <=5
    begin
	 set @ctr1 = @ctr1 + 1if @ctr1 = 4
	  break
	  print @ctr1
	  end
	  --while with continue
declare @ctr2 int =0
   while @ctr2 <=5
    begin
	 set @ctr2 = @ctr2 + 1
	 if @ctr2 = 4
	  --break
	  continue
	  print @ctr2
	  end
	 
-- updating records using while loop
select * from employee

declare @min_id int
select @min_id = min(empid) from employee
print @min_id

declare @row_count bigint = 0
declare @sal float, @rsal float

--get the count of total rows to process
--select @row_count = (select count(empid) from employee)
print @row_count
select @row_count = max(empid) from employee
 select @sal = salary from employee where empid =@min_id
--print @row_count
while @min_id <= @row_count
 begin
  select @rsal = salary from employee where empid =@min_id  
  if(@rsal < @sal)
   begin
    update employee set salary = @rsal + 100
	where empid = @min_id
	end
	else
	begin
	 print 'Salary seems to be ok'
	 end
	 set @min_id = @min_id + 1
end

insert into employee values(110,'Banurekha','Female',6000,2,'666666')
select * from employee

--stored procedures
create procedure sp_greetings
 as
 begin
  select 'Hello and Welcome to SQL Procedures '
  end

   --to execute th eprocedure
  execute sp_greetings 
  exec sp_greetings
 sp_greetings
 
 create proc sp_employeedata
 as begin
 select * from employee where DepartmentId=2
 end

 sp_employeedata