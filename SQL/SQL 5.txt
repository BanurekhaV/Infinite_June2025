use infinitedb

select (salary*12 ) from employee
--procedures 
--write a procedure that calculates whether an employee is eligible for tax or not
create or alter proc sp_Taxcalculator @eid int, @annualsal float output
as
begin
 declare @tempsal float
 select @tempsal = (salary*12) from employee where empid = @eid
 if(@tempsal > 78500)
   begin
    set @annualsal = @tempsal
	end
else
 begin
  print 'No Tax levied as annual salary is within the limits'
  end
end

----to execute the above proc with output,  option 1
--declare @outannsal float, @tax float
--exec sp_Taxcalculator 100, @outannsal output
--set @tax = @outannsal *10/100
--print 'Salary earned is  '+ cast(@outannsal as varchar(8))
--print ' Tax amount to be deducted : '+ cast(@tax as varchar(8))

--option 2 is by changing the order
declare @outannsal float, @tax float
exec sp_Taxcalculator @annualsal=@outannsal output, @eid=106

set @tax = @outannsal *10/100
print 'Salary earned is  '+ cast(@outannsal as varchar(8))
print ' Tax amount to be deducted : '+ cast(@tax as varchar(8))

--ex. create a proc that takes employee number and outputs the manager name, employee name and the employee salary 

--procedures with return type 
--can be used when we want an integer value to be returned
--create a proc that takes an empid and returns the deptid where the employee works
create or alter proc sp_getDept @eid int
as
begin 
-- return (select departmentid from employee where empid=@eid)
return (select DepartmentId from employee where empid=@eid)
 end

 --declare @did int
 --exec @did = sp_getDept 103
 --select 'The Deapartment of the Employee is :' + cast(@did as varchar(5))

 --ex. given a dept no, return the count of employees in that department
create or alter proc sp_getempcount @did int
as
begin
 return (select count(empid) from employee where DepartmentId = @did)
end

declare @totemp int
exec @totemp=sp_getempcount 2
print @totemp

--eg : create a proc that takes deptno as input, and outputs the average salary of that dept and also 
--returns the count of employee in that department

create or alter proc sp_getavgsal_empcount (@did int, @avgsal float output)
as
begin
 select @avgsal = avg(salary) from employee where DepartmentId = @did
 return (select count(empid) from employee where DepartmentId = @did)
 end

 --execute the above
 declare @sal float
 declare @count int
 exec @count = sp_getavgsal_empcount 1, @sal output
 print 'Total Employees in Dept : ' + cast(@count as varchar(3)) + 
  ' and the dept average is : ' + cast(@sal as varchar(8))

 drop procedure sp_getavgsal_empcount

 --error handling
 create or alter proc sp_chkerror
 as
 begin
  begin try
 select salary + empname from employee where empid=105
  end try
  begin catch
   --select 'Some Conversion error occured.. check it out'
  -- throw 51000, 'Unable to convert data types', 8
  raiserror(63000,16,8)
end catch
end


--full example with dml operations, error handlers, system variables in a procedure.
drop table productsales

drop table products 

create table Products
(ProductId int primary key,
ProductName varchar(40),
Price int,
QuantityAvailable int)

insert into Products values(101, 'Laptops',55000,100),
(102,'Desktops',38000,50),(103,'Tablets',65000,35),(104,'Mobiles',75000,70)

--create a productsales table to record sales
create table ProductSales
(ProductSalesID int primary key,
PrdID int references Products(ProductId),
QuantitySold int)

select * from Products
select * from ProductSales
select max(productsalesid) from ProductSales

--alter table productsales
--add constraint fkprodid foreign key(prdid) references Products(productid)

--will create a procedure to have the sales entry made and to update the products table
create or alter proc sp_Product_salesMade
@prdid int, @qtyto_sell int
as
begin
 --first let us check the stock available for the product we want to sell
  declare @stockavailable int
  select @stockavailable = QuantityAvailable  from products where productid = @prdid
  --if the qty_tosell is more than the stock avialable then we should raise an error
  if(@stockavailable is null)
  begin
   raiserror('Wrong Product', 15,1)
  end
  if(@stockavailable < @qtyto_sell)
     begin
	  raiserror('Not enough stock available', 16,1)
	  
	 end
	 else
	 begin
	 --let us now start the dml 
	 --first we will reduce the qty available in products table
	 update products set QuantityAvailable = QuantityAvailable - @qtyto_sell
	 where productid=@prdid
	 
	 --after the updation, we will make an insertion int the productsales table
	 -- check if the table is having any data. If no, then some value, else value + 1
	 declare @maxsaleid int

	 select @maxsaleid = case
	  when max(productsalesid) is null then 0
	  else max(productsalesid)
	  end
	  from productsales

	  --increment @maxsaleid by 1, to avoid pk violation
	  set @maxsaleid = @maxsaleid + 1

	  --we can start inserting
	  insert into productsales values(@maxsaleid, @prdid, @qtyto_sell)
	  end
	  --@@error - a global variable that has non 0 value if there was an error, else 0
	  if(@@ERROR <> 0)
	   begin
	    print 'Error ... rolling back'
		end
		else
		begin
		  print 'success'
		  end
end

exec sp_Product_salesMade 102, 10

