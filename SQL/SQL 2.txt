--creating table level constraints

create table dummy
(did int,
dname varchar(20),
dref int,
constraint PK_dummy primary key (did, dname),
constraint Fk_dref foreign key(dref) references Department(deptid))

sp_help employee

-- disabling check constraint
alter table employee nocheck constraint salcheck

select * from employee
insert into employee values(103, 'Adithya','Male',6300,2,'212345'),
(104,'Poorna','Female',6250,1,333333)

--enabling check constraint
alter table employee check constraint salcheck

--deleting 
insert into dummy values(1,'aa',1),(2,'bb',2)
select * from dummy

delete from dummy where did = 1
truncate table dummy

update employee set phone='88777' where EmpName='hemachandra'

alter table employee
add constraint UPhone unique (phone)

--default constraints
alter table department
add constraint defbudget default 5000 for deptbudget

--to effect the default values, we have to avoid the column in the insert statement
insert into Department (Deptid,DeptName) values(7,'Purchase')
select * from employee
select * from Department

--selection and projection
select * from employee
select Empname, salary from employee

--top records
select top 3 * from employee

--top percentage
select top 10 percent empname from employee

--alias
select empid EmployeeIdentificationNumber from employee
select empid 'Employee Identification Number' from employee
select empid as [Employee Identification Number] from employee

--computational columns/arithemetic operators
select empname as 'Employee Name', salary 'Monthly Salary', (salary*12) as 'Annual Salary',
(salary/30) 'Daily Salary' from employee

--calculated or computed columns at the definition 
drop table dummy
create table dummy
(did int,
dprice int,
dqty int,
dtotal as(dprice*dqty))

insert into dummy values(2,null,10)
select * from dummy

--relational operators
select * from employee where gender = 'male'
select * from employee where salary > 6000
select * from employee where DepartmentId <> 1
select empname, (salary+1000) from employee where DepartmentId =2

--logical operator
select * from employee where (salary > 6000 and salary < 6300) or DepartmentId=2
select * from employee where not DepartmentId = 1

--between and not between (for inclusive range values)
select * from employee where salary between 6000 and 6300

select * from employee where salary not between 6000 and 6300

--null values
select * from employee where DepartmentId is null

select * from employee where DepartmentId is not null

--in operator
-- fetch all employees who work for dept 1 and 2

select * from employee where DepartmentId in (1,3)

select * from employee where DepartmentId not in(1,3)

--aggregates 
select max(salary) from employee
select avg(salary) 'Average Salary ' from employee
select max(salary) as 'Maximum Salary', min(salary) as 'Minimum Salary', avg(salary) as 'Average Salary'
from Employee

select count(departmentid) from employee  -- count ignores nulls and counts duplicates

select distinct(departmentid) from employee -- distinct includes null and ignores duplicates

select count(distinct(departmentid))from employee

select count(*)departmentid from employee

--wild card characters with like 
--% [percentile] - substitution of 0,1,or more characters
-- _[underscore] - substitutes exactly one character
-- [range] - substitutes characters within the given range
-- ^[caret] -  substitutes characters not within the given range

select * from employee where empname like 'A%'
select * from employee where empname like '%A'
select * from employee where empname like '%h%'

--get employee names which have i,e,h as their second character
select * from employee where empname not like '_[ieh]%'
select * from employee where empname like '_[^ieh]%'
select * from employee where empname like 'a__[ti]%'

--string operations
select concat('Happy' , ' Birthday ' , 'to ', ' you' , ' 2025')
select replace('Jack and Jill', 'J','Bl')
select ASCII('d')

--date operations
select getdate()
select convert(varchar(11),getdate())
select datename(dw,getdate())

select substring(convert(varchar(11),getdate(),113),4,8) as [Month YYYY]

--sorting
select * from employee
order by EmpName desc

--multiple column sorting
select * from employee order by DepartmentId, salary desc

--alias name
select empname as 'Employee Name', salary as 'Employee Salary',departmentid from employee
order by DepartmentId, [Employee Salary] desc

--columns not in select list
select empname as 'Employee Name', salary as 'Employee Salary' from employee
order by DepartmentId, [Employee Salary] desc

--group by
--write a query to find all employees who earn more than the average of the salary

select DepartmentId,sum(salary) from employee
group by DepartmentId

select sum(salary) from employee
group by DepartmentId

--find dept wise average salary
select Departmentid, avg(salary) 'Average Salary' from employee
group by DepartmentId
order by [Average Salary]

--depet wise , gender wise average salary
select departmentid, gender, avg(salary) as Average from employee
group by departmentid,gender
order by DepartmentId