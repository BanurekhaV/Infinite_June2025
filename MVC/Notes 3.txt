Remote Validations :

Passing Data from controller/model to views using sessions

What is Session in ASP.NET MVC ?

ASP.NET Session is an object to store information about the user 
-It can be used for passing data between models/controllers to the view page 
-It's value doesn’t become null after passing information until we manually set it to null or session   	times expires. 
-By default, in ASP.NET MVC, session time is 20 minutes and we can increase or decrease time upon needs. 
-A session is mostly used in login page where a user is considered as validated until the session expires or the user clicks on log out button.


Tuples - What are Tuples in ASP.NET MVC?
 - It is immutable, fixed-size and ordered sequence object. 
 - It is a data structure that has a specific number and sequence of elements and it supports up to 7 to 8 elements. 
 - We can use Tuples for passing multiple models in a single view page.
 - Pass the models in Tuple<model1, model2, model3,….model7> brackets and then pass the respective action method in sequence that is mapped with model, like (function1, function2, function3,….function7)
 -  Add tuples in the beginning of the view page and pass models name in parameter, as below

@model Tuple<ItemModel, List<ReviewersModel>>  (as per our Demo)




Model Binder : is the mechanism which converts the URL segment into method Parameters
- The Parameters can be of primitive type or complex type
- It acts like a bridge between http request and action method and maps the values from the URL which may be as below :

 Model binder uses default Model Binder mapping (rules for mapping)
1. Request.Form[] : if the request is post
2. RouteData.Values[] : if the value is in the route
3. Request.QueryString[] : if the values are concatenated in the url as query strimg
4. Request.Files[] : If the file is being uploaded

When we have to custom bind in situations where the UI controls names are different from Model properties names, we can implement the IModelBinder interface BindModel Method()
  


Bundling & Minification : is a concept of making use of static files viz .js, .css etc that are required by the application.
- This would be rendered after compressing the resources 
- We can add any resources to the bundle collection of the BundleConfig.cs


Partial Views : are views that are rendered within another view.
- have .cshtml extension like normal views
- are usedwhen we need some common view to be displayed as part of many other views
- are also useful to divide the webpage into smaller portions (header, footer, menus etc..)

To Render a Partial View :

  1. Html.RenderPartial : Is a void Method that writes the output to the response stream as  apart of the same Http Response
  - it is fastest way to render partial views
  - since it is a void method, we should enclose the call within the '{}'

  2. Html.Partial : this method returns a MVC IHtmlString

  3. Html.RenderAction : is the best choice when we want to cache the partial view. 
   - can call child action methods and then render the partial view
   - since it is a void method, we should enclose the call within the '{}'

  4. Html.Action : same as above, but returns a partial view result as IHtmlstring

  5. JQuery Load Function : Can display the partial views on Load method of the Jquery