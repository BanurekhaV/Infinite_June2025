Local Functions : If we want to execute some piece of code multiple times within a function, then we can place such codes as inner functions called as local function
 Note : 1. We cannot overload Local Functions
        2. Cannot alter access modifiers such as private, public, protected, internal etc
        3. All variables in the enclosing scope, including local variables can be accessed
        4. Compiler throws a warning, if the parent function does not call the local function

Nameof : Expression produces the name of a variable, type, or member as string constants
         Is used to point out errors if any in our code during compilation time and has no effect during runtime

Exception Filters : allows us to specify conditional clause for each catch block
                    Provides a structured way to handle exceptions on specific criteria, hence enhances exception management
                

Expression Bodied members : is a feature that simplifies/reduces the programming code by creating expression bodies for functions and properties. It is similar to that of lambda expressions

Non Nullable References : It is an attempt to ensure that Objects have valid references, else we have to make it nullable either by using '?' or Nullable<T> type . By default the framework allows null for reference types. if we want to have non nullable references, then we have to enable Nullable option in the property group of the applications project file (.csproj)

Extern Alias : When we have name clashes between 1 or more libraries that are included in a project, then we may avoid the ambiguity by creating extern aliases. (Are alias names given to libraries that have same class names/function names/member names)

Dictionary Initilizers: are enhancements to initializing Dictionary Objects

Async and Await in catch/Finally blocks: 

Throws Expression  : enhancement of code to throw an exception thru an expression 

Tuples: Is a data structure that contains a sequence of elements of different data types. It can hold objects with its properties, and we don't have to create a separate type for it

Why Tuples : If we wish to have multiple return values from a method, then we can use tuples

Different ways in which we can return multiple values 
1. Using Custom Datatype : Eg student object . We can return multiple values(properties) from a method using a custom object (i.e class). But in some scenarios, we may not need all the date.

2. using Ref and out : We can return multiple values from a method using 'out', but understanding and internal implementations are a bit difficult. out and ref are not allowed with async methods

3. Use Dynamic type : We can return multiple values from a method using dynamic datatype. But from performance point of view, we may not want to use Dynamic types

Hence preference is to go for tuples

Pattern matching :

         