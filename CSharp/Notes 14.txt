Pattern Matching : allows testing an expression for a given pattern. Results in either matching or not (true or a false )

- pattern matching operations
  1. type checking (type pattern)
  2. null checking (constant pattern)
  3. comparison checking (relational pattern)
  4. object deconstruction (positional pattern)
  5. comparing and checking property values (property pattern)
  6. we can male expressions reuse the variable creation (var pattern)

 1. is operator
 2. switch expression
    expression switch{
     pattern1 => value1,
     pattern2 => value2,

   pattern => valueN,
   _=>defaultvalue
}

static void PrintUppCase(object o)
{
  if(o is string)
    { 
       cw(o.ToUpper());
}
 else { cw("not a string");}
}

static void Main()
{
  string str = "Hello";
   int num =45;
   object obj1 = str;
   object obj2 = num;

PrintUpperCase(obj1); 
PrintUpperCase(obj2);

Iterators( C# 2.0) : are methods in c# used in any collections to retrieve one element at a time. 
It makes use of yield return statement to return an element at current location Uses yield break to stop iteration

- the return type of this method is IEnumerable, IEnumerable<T>, IEnumerator, IEnumerator<T>. The method automatically creates the above interface
   IEnumerator interface has current property and movenext(), dispose();

-- can be used with methods and on properties (get accessor)
-- cannot be used with events, instance and static constructors
-- iterator method cannot have ref or out parameters
-- yield is not a keyword, but when used with either return or break, has a special meaning
